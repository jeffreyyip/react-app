{"version":3,"sources":["service/PhoneValidationService.js","component/PhoneTextInput.jsx","component/HistorySelect.jsx","component/ResultTable.jsx","component/ValidationApp.jsx","App.js","serviceWorker.js","index.js"],"names":["phone","axios","get","PHONE_VALIDATION_HOST","PhoneTextInput","props","className","type","HistorySelect","value","onChange","name","options","map","option","index","key","displayValue","ResultTable","results","result","message","ValidationApp","changeHandler","event","target","updatedControls","state","formControls","updatedFormElement","setState","onSubmit","phoneValue","console","log","updatedHistory","concat","PhoneValidationService","validate","then","rtn","updatedResults","data","valid","status","JSON","stringify","catch","err","error","placeholder","phoneHistory","bind","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAee,M,iGALFA,GACL,OAAOC,IAAMC,IAAN,UAPcC,4CAOd,YAAqCH,Q,MCErCI,EAVQ,SAAAC,GACnB,OAEI,yBAAKC,UAAU,cACX,0DACA,yCAAOC,KAAK,OAAOD,UAAU,gBAAmBD,MCc7CG,EApBO,SAAAH,GAGlB,OACI,yBAAKC,UAAU,cACb,mDACE,6BACA,4BAAQA,UAAU,eAAeG,MAAOJ,EAAMI,MAAOC,SAAUL,EAAMK,SAAUC,KAAMN,EAAMM,MACxFN,EAAMO,QAAQC,IAAI,SAACC,EAAQC,GAAT,OACjB,4BAAQC,IAAKD,EAAON,MAAOK,EAAOL,OAC/BK,EAAOG,kBAKd,wGCaGC,EA5BK,SAAAb,GAEhB,OACI,yBAAKC,UAAU,aACX,kDACA,2BAAOA,UAAU,SACb,+BACI,4BACI,4CACA,mDAGR,+BAEQD,EAAMc,QAAQN,IAAK,SAACO,EAAQL,GAAT,OACf,wBAAIC,IAAKD,GACL,4BAAKK,EAAOpB,OACZ,4BAAKoB,EAAOC,gB,ujBCkH7BC,E,YA9HX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KAuBVkB,cAAgB,SAAAC,GACZ,IAAMb,EAAOa,EAAMC,OAAOd,KACpBF,EAAQe,EAAMC,OAAOhB,MAErBiB,EAAgB,EAAD,GACd,EAAKC,MAAMC,cAEZC,EAAmB,EAAD,GACjBH,EAAgBf,IAEvBkB,EAAmBpB,MAAQA,EAE3BiB,EAAgBf,GAAQkB,EAEX,iBAATlB,IAEAe,EAAe,MAAUjB,MAAQiB,EAAe,aAAiBjB,OAIrE,EAAKqB,SAAS,CACVF,aAAcF,KA7CH,EAuDnBK,SAAW,WAEP,IAAMC,EAAa,EAAKL,MAAMC,aAAX,MAAiCnB,MACpDwB,QAAQC,IAAR,mBAAwBF,IAExB,IAAMN,EAAgB,EAAD,GACd,EAAKC,MAAMC,cAEZC,EAAmB,EAAD,GACjBH,EAAe,cAGhBS,EAAiBN,EAAmBjB,QAAQwB,OAAO,CAAC3B,MAAOuB,EAAYf,aAAce,IAC3FH,EAAmBjB,QAAUuB,EAE7BT,EAAe,aAAmBG,EAGlCQ,EAAuBC,SAASN,GAC3BO,KAAM,SAAAC,GACCP,QAAQC,IAAIM,GACZ,IAAMC,EAAiB,EAAKd,MAAMR,QAAQiB,OAAO,CAACpC,MAAOgC,EAAYX,QAAS,GAAKmB,EAAIE,KAAKC,QAE5F,EAAKb,SAAS,CACVF,aAAeF,EACfL,QAAO,2BAAuBmB,EAAII,OAA3B,mBAA4CC,KAAKC,UAAUN,EAAIE,MAA/D,MACPvB,QAASsB,MAIpBM,MAAO,SAAAC,GACJ,EAAKlB,SAAS,CACVT,QAAO,gCAA4B2B,EAAI3B,WAE3CY,QAAQgB,MAAOD,MAtFvB,EAAKrB,MAAQ,CACTC,aAAc,CACV5B,MAAO,CACHS,MAAO,GACPyC,YAAa,eAEjBC,aAAc,CACV1C,MAAO,GACPG,QAAS,CACL,CAAEH,MAAO,GAAIQ,aAAc,OAIvCI,QAAS,KACTF,QAAS,IAIb,EAAKY,SAAW,EAAKA,SAASqB,KAAd,gBArBD,E,sEAiGf,OACI,yBAAK9C,UAAU,aACX,sDAEA,8BAAUA,UAAU,cACpB,kBAAC,EAAD,CAAgBK,KAAK,QACTF,MAAO4C,KAAK1B,MAAMC,aAAa5B,MAAMS,MACrCC,SAAU2C,KAAK9B,cACf2B,YAAaG,KAAK1B,MAAMC,aAAa5B,MAAMkD,cAEvD,4BAAQ5C,UAAU,kBAAkBC,KAAK,SAAS+C,QAASD,KAAKtB,UAAhE,YACA,6BAAK,6BACL,kBAAC,EAAD,CAAepB,KAAK,eACRF,MAAO4C,KAAK1B,MAAMC,aAAauB,aAAa1C,MAC5CC,SAAU2C,KAAK9B,cACfX,QAASyC,KAAK1B,MAAMC,aAAauB,aAAavC,WAIzDyC,KAAK1B,MAAMN,SAAW,yBAAKf,UAAU,uBAAuB+C,KAAK1B,MAAMN,SAExE,kBAAC,EAAD,CAAaF,QAASkC,KAAK1B,MAAMR,e,GAvHrBoC,aCObC,MATf,WACE,OAEE,yBAAKlD,UAAU,aACb,kBAAC,EAAD,QCIcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.952753f3.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst PHONE_VALIDATION_HOST = 'http://localhost:8080'\nconst PHONE_VALIDATION_PATH = '/api/phoneValidation'\nconst PHONE_VALIDATION_API = PHONE_VALIDATION_HOST + PHONE_VALIDATION_PATH\n\n\n\nclass PhoneValidationService {\n\n    validate(phone) {\n        return axios.get(`${PHONE_VALIDATION_API}/${phone}`);\n    }\n}\n\nexport default new PhoneValidationService()\n","import React from 'react'\n\n\nconst PhoneTextInput = props => {\n    return (\n\n        <div className=\"form-group\">\n            <label>Phone to be validated: </label>\n            <input type=\"text\" className=\"form-control\" {...props} />\n        </div>\n    );\n}\n\nexport default PhoneTextInput;","import React from 'react';\n\nconst HistorySelect = props => {\n\n \n    return (\n        <div className=\"form-group\">\n          <label>Phone history : </label>\n            <div>\n            <select className=\"form-Control\" value={props.value} onChange={props.onChange} name={props.name}>\n              {props.options.map((option, index) => (\n                <option key={index} value={option.value}>\n                  {option.displayValue}\n                </option>\n              ))}\n            </select>\n            </div>\n            <p>(you could select the phone here and click validate to verify it again)</p>\n        </div>\n    );\n}\n\nexport default HistorySelect;","import React from 'react';\n\nconst ResultTable = props => {\n\n    return (\n        <div className=\"container\">\n            <h3>Validation Results</h3>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>phone number</th>\n                        <th>validation result</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        props.results.map( (result, index) =>\n                            <tr key={index}> \n                                <td>{result.phone}</td>\n                                <td>{result.message}</td>\n                            </tr>\n                        \n                        )\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ResultTable;","import React, { Component } from 'react';\nimport PhoneValidationService from '../service/PhoneValidationService';\nimport PhoneTextInput from './PhoneTextInput';\nimport HistorySelect from './HistorySelect';\nimport ResultTable from './ResultTable';\n\nclass ValidationApp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            formControls: {\n                phone: {\n                    value: '',\n                    placeholder: 'input phone'\n                },\n                phoneHistory: {\n                    value: '',\n                    options: [\n                        { value: '', displayValue: ''}\n                    ]\n                }\n            },\n            message: null,\n            results: []\n        }\n\n            \n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    changeHandler = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        const updatedControls={\n            ...this.state.formControls\n        };\n        const updatedFormElement={\n            ...updatedControls[name]\n        };\n        updatedFormElement.value = value;\n\n        updatedControls[name] = updatedFormElement;\n\n        if (name === 'phoneHistory'){\n\n            updatedControls['phone'].value = updatedControls['phoneHistory'].value;\n\n        }\n\n        this.setState({\n            formControls: updatedControls\n        }\n\n\n\n        );\n\n    }\n\n\n    onSubmit = () => {\n\n        const phoneValue = this.state.formControls['phone'].value;\n        console.log(`validate ${phoneValue}`);\n\n        const updatedControls={\n            ...this.state.formControls\n        };\n        const updatedFormElement={\n            ...updatedControls['phoneHistory']\n        };\n\n        const updatedHistory = updatedFormElement.options.concat({value: phoneValue, displayValue: phoneValue });\n        updatedFormElement.options = updatedHistory;\n\n        updatedControls['phoneHistory'] = updatedFormElement;\n\n\n        PhoneValidationService.validate(phoneValue)\n            .then( rtn =>  {\n                    console.log(rtn);\n                    const updatedResults = this.state.results.concat({phone: phoneValue, message: '' + rtn.data.valid});\n\n                    this.setState({\n                        formControls : updatedControls,\n                        message : `Response Status: ${rtn.status}, Data: ${JSON.stringify(rtn.data)}  `,\n                        results: updatedResults\n                    });\n                }\n            )\n            .catch( err => {\n                this.setState({\n                    message : `Error in validation : ${err.message}`\n                });\n                console.error( err );\n            })\n\n \n    };\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3>Validation Application</h3>\n                \n                <fieldset className=\"form-group\">\n                <PhoneTextInput name=\"phone\"\n                            value={this.state.formControls.phone.value}\n                            onChange={this.changeHandler}\n                            placeholder={this.state.formControls.phone.placeholder}\n                />\n                <button className=\"btn btn-success\" type=\"submit\" onClick={this.onSubmit}>validate</button>\n                <br/><br/>\n                <HistorySelect name=\"phoneHistory\"\n                            value={this.state.formControls.phoneHistory.value}\n                            onChange={this.changeHandler}\n                            options={this.state.formControls.phoneHistory.options}\n                />\n                </fieldset>\n                \n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n\n                <ResultTable results={this.state.results} />\n\n\n            </div>\n        )\n    }\n}\n\nexport default ValidationApp\n","import React from 'react';\nimport './App.css';\nimport ValidationApp from './component/ValidationApp';\n\nfunction App() {\n  return (\n\n    <div className=\"container\">\n      <ValidationApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}